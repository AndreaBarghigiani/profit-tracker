// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  project       Project[]
  hodl          Hodl[]
  role          Role      @default(AUTHOR)
  wallet        Wallet?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt
  name              String
  description       String
  currentHolding    Float
  initial           Float
  increaseFrequency Frequency     @default(DAILY)
  increaseAmount    Float
  compound          Boolean
  accruing          Boolean       @default(false)
  type              String        @default("project")
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  transaction       Transaction[]
}

model Hodl {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt
  currentAmount     Float         @default(0)
  currentEvaluation Float         @default(0)
  totalInvested     Float         @default(0)
  token             Token         @relation(fields: [tokenId], references: [id])
  tokenId           String
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  transaction       Transaction[]
}

model Transaction {
  id         String          @id @default(cuid())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  amount     Float
  evaluation Float           @default(0)
  type       TransactionType @default(DEPOSIT)
  project    Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String?
  hodl       Hodl?           @relation(fields: [hodlId], references: [id])
  hodlId     String?
}

model Wallet {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  lastInterestAccrued DateTime @default(now())
  dailyProfit         Float    @default(0)
  total               Float    @default(0)
  totalDeposit        Float    @default(0)
  totalWithdraw       Float    @default(0)
  user                User     @relation(fields: [userId], references: [id])
  userId              String   @unique
}

model Token {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @default(now()) @updatedAt
  symbol       String?
  name         String
  iconUrl      String?
  latestPrice  String         @default("0")
  coingecko_id String         @unique
  platforms    Json
  tracked      Boolean        @default(false)
  tokenHistory TokenHistory[]
  hodl         Hodl[]

  @@index([symbol, name])
}

model TokenHistory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  token     Token    @relation(fields: [tokenId], references: [id])
  tokenId   String
  price     String
}

enum Role {
  AUTHOR
  EDITOR
  SUBSCRIBER
  ADMIN
}

enum Frequency {
  HOURLY
  DAILY
  WEEKLY
  MONTLY
  YEARLY
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  INTEREST
  BUY
  SELL
}
