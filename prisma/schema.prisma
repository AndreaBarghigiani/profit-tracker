// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  project       Project[]
  hodl          Hodl[]
  role          Role      @default(AUTHOR)
  wallet        Wallet?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wallet {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dailyProfit Float     @default(0)
  liquidFunds Float     @default(0) // Total funds available for withdrawal or to invest
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique
  project     Project[]
  hodl        Hodl[]
}

model Project {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt
  name              String
  description       String
  exposure          Float         @default(0) // How much the user is exposed to this project
  deposit           Float         @default(0) // Total deposits made to this project
  moneyAtWork       Float         @default(0) // Total deposits made to this project
  interest          Float         @default(0) // Total interest earned from this project, still to be withdrawn
  profits           Float         @default(0) // Total profits earned from this project, WITHDRAW transactions after exposure goes to 0
  lockPeriod        Int           @default(0) // How long the user has to wait before withdrawing the deposit
  depositFee        Float         @default(0) // Fee charged when depositing
  withdrawalFee     Float         @default(0) // Fee charged when withdrawing
  increaseFrequency Frequency     @default(DAILY)
  increaseAmount    Float
  compound          Boolean
  accruing          Boolean       @default(false)
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              String        @default("project")
  wallet            Wallet        @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId          String
  transaction       Transaction[]
}

model Hodl {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  amount      Float         @default(0) // Total amount of tokens held
  exposure    Float         @default(0) // How much the user is exposed to this token
  profits     Float         @default(0) // Total profits earned from this token, SELL transactions after exposure goes to 0
  status      String        @default("active")
  token       Token         @relation(fields: [tokenId], references: [id])
  tokenId     String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  wallet      Wallet        @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId    String
  transaction Transaction[]
  dcaStrategy DcaStrategy?
}

model Transaction {
  id         String          @id @default(cuid())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  amount     Float
  evaluation Float           @default(0)
  type       TransactionType @default(DEPOSIT)
  project    Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String?
  hodl       Hodl?           @relation(fields: [hodlId], references: [id], onDelete: Cascade)
  hodlId     String?
}

model Token {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  symbol       String
  name         String
  iconUrl      String?
  latestPrice  Float          @default(0)
  change24h    Float          @default(0)
  // Refactor: Rename to sourceId (we pull data from multiple sources)
  coingecko_id String         @unique
  platforms    Json?
  tracked      Boolean        @default(false)
  custom       Boolean        @default(false)
  tokenHistory TokenHistory[]
  hodl         Hodl[]

  @@index([symbol, name])
}

model TokenHistory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  token     Token    @relation(fields: [tokenId], references: [id])
  tokenId   String
  price     Float
}

model DcaStrategy {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  dcaSteps  DcaSteps[]
  hodl      Hodl?      @relation(fields: [hodlId], references: [id], onDelete: Cascade)
  hodlId    String?    @unique
}

model DcaSteps {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  price         Float
  percentage    Float
  DcaStrategy   DcaStrategy? @relation(fields: [dcaStrategyId], references: [id])
  dcaStrategyId String?
}

enum Role {
  AUTHOR
  EDITOR
  SUBSCRIBER
  ADMIN
}

enum Frequency {
  HOURLY
  DAILY
  WEEKLY
  MONTLY
  YEARLY
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  INTEREST
  BUY
  SELL
  REMOVE // Remove from deposit
}
